allprojects {
	apply plugin: 'groovy'
	
	repositories {
       	mavenCentral()
	}
	
	configurations {
		all*.exclude group:'bouncycastle'
	}

	dependencies {
		// brg 11/30/2020 - 'gradle test' fails on implementation line below with 'illegal reflective accesss'.
		// Builds without issue e.g. 'gradle assemble' as long as we don't test e.g. 'gradle build' (which builds
		// and runs tests).
		implementation 'org.codehaus.groovy:groovy-all:1.6.4'
		compile 'com.google.collections:google-collections:1.0-rc2'
		compile 'com.google.inject:guice:2.0'
		compile 'com.google.inject.extensions:guice-multibindings:2.0'
		compile 'aopalliance:aopalliance:1.0'
		compile 'org.slf4j:slf4j-api:1.7.5'
		runtime 'org.slf4j:slf4j-log4j12:1.7.5'
		compile 'xerces:xerces:2.3.0' // brg 2/19/2014: needed on Windows, not on OSX for some reason?
		testCompile 'junit:junit:3.8.2'
	}

	java {
		sourceCompatibility = JavaVersion.VERSION_1_6
		targetCompatibility = JavaVersion.VERSION_1_6
	}
	version = '1.0.2'

	// Directory and filename of Java runtime, required for packaging
	project.ext.javaRuntimeDir = file("${project.rootDir}/package/java_runtime/mac")
	project.ext.javaRuntimeFile = 'jre8'
}

// Griffon 0.2 requires compilation with Java 6
final javaHome = '/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home'
def javaExecutablesPath = new File(javaHome, 'bin')
def javaExecutables = [:].withDefault { execName ->
	def executable = new File(javaExecutablesPath, execName)
	assert executable.exists(): "There is no ${execName} executable in ${javaExecutablesPath}"
	executable
}
tasks.withType(AbstractCompile) {
	options.with {
		fork = true
		forkOptions.javaHome = file(javaHome)
	}
}

task packageCheck() {
	doLast {
		println "Checking for Java runtime dir and JRE..."
		if (!javaRuntimeDir.exists()) {
			throw new Error("Error: javaRuntimeDir ${javaRuntimeDir.absolutePath} does not exist.")
		}
		if (javaRuntimeFile == null) {
			throw new Error("Error: javaRuntimeFile var is null.\nTo resolve, update javaRuntimeFile var with your Java 8 runtime in build.gradle.")
		}
		if (javaRuntimeDir.listFiles().find { it.name.equals(javaRuntimeFile) } == null) {
			throw new Error("Error: Missing Java runtime file '${javaRuntimeFile}' in ${javaRuntimeDir.absolutePath}")
		}	
	}
}

// Package PSICAT, SchemeEditor app bundles and resource files into a bundle
// ready for distribution.
task packageMac() {
	dependsOn ':tools:PSICAT:packageMac'
	dependsOn ':tools:SchemeEditor:packageMac'

	doLast {
		def app = file("dist/mac/PSICAT-${version}")
		if (!app.exists()) {
			println "${app.absolutePath} not found, creating."
		}

		copy {
			into app
			from "tools/PSICAT/dist/mac"  // PSICAT app bundle
		}

		copy {
			into app
			from "tools/SchemeEditor/dist/mac" // SchemeEditor app bundle
		}

		copy { // legacy schemes
			into new File(app, "legacy schemes")
			from "legacy schemes"
		}

		copy { // modern schemes
			into new File(app, "resources")
			from "resources"			
		}

		// tar and zip up the entire package
		exec {
			workingDir "dist/mac"
			commandLine "tar", "cfvz", "PSICAT-${version}.tar.gz", "."
		}
	}
}

task 'assemble-jars'(dependsOn: build) {
	doLast {
		File distDir = new File(buildDir, 'libs')
		distDir.mkdirs()
		subprojects.findAll { it.name != 'examples' && it.name != 'scripting' }.each { project ->
			project.configurations?.compile?.files { dep -> dep.group != 'unspecified' }.each { dep ->
				ant.zip(destfile: new File(distDir, dep.name)) {
					zipfileset(src:dep, excludes:"log4j*")
				}
			}
			
			copy {
				from new File(project.buildDir, 'libs')
				into distDir
				include '*.jar'
			}
		}
	}
}